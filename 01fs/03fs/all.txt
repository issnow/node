let fs = require('fs')
// 导入文件模块
// node,读写文件也有同步和异步的接口

// 同步读取
let fd = fs.openSync('hello.txt', 'r')
// console.log(fd)

// 同步 等待和阻塞
// let content = fs.readFileSync('hello.txt', {flag: 'r',encoding: 'utf-8'})

// 异步
fs.readFile('hello.txt', {flag: 'r', encoding: 'utf-8'}, function(err, data) {
  if(err) {
    console.log(err)
  }else {
    console.log(data)
  }
  console.log(456)
})
console.log(123)

// console.log(content)


// 用promise封装fs.readFile方法,解决异步调用的循环写法
function fsRead(path) {
  return new Promise((resolve, reject)=>{
    fs.readFile(path, {flag: 'r',encoding: 'utf-8'}, (err,data)=>{
      if(err) {
        reject(err)
      }else {
        resolve(data)
      }
    })
  })
}

// let res = fsRead('hello.txt').then((data)=>{
//   console.log(data, 'ohou')
// })

async function ReadList() {
  var file2 = await fsRead('hello.txt')
  var file3 = await fsRead(file2+'.txt')
  var file4 = await fsRead(file3+'.txt')
  console.log(file4, 'file4')
}

ReadList()
let fs = require('fs')

// 删除文件
fs.unlink('gc.txt', err=>{
  if(err) {
    console.log(err)
  }else {
    console.log('success')
  }
})hello world2hello3let fs = require('fs')

// 用promise封装fs.readFile方法,解决异步调用的循环写法
function fsRead(path) {
  return new Promise((resolve, reject)=>{
    fs.readFile(path, {flag: 'r',encoding: 'utf-8'}, (err,data)=>{
      if(err) {
        reject(err)
      }else {
        resolve(data)
      }
    })
  })
}


function fsWrite(path, data) {
  return new Promise((resolve,reject)=>{
    fs.writeFile(path,data,{encoding: 'utf-8',flag: 'a'}, err=>{
      if(err) {
        reject(err)
      }else {
        resolve(err)
      }
    })
  })
}

module.exports = {
  fsRead,fsWrite
}let fs = require('fs')
let {fsRead,fsWrite} = require('./utils')

fs.readdir('../03fs', (err, file)=>{
  if(err) {
    console.log(err)
  }else {
    console.log(file)
    file.forEach(async e=>{
      let res = await fsRead(`${__dirname}/${e}`)
      await fsWrite('./all.txt', res)
    })
  }
})
  {
    "name": "asfd",
    "version": "sdf",
    "description": "sdf",
    "main": "asdf",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "keywords": [],
    "author": "adf",
    "license": "ISC",
    "dependencies": {
      "qs": "^6.9.4"
    }
  }
  /**
 * buffer(缓冲器)解决了什么问题
 * 1.数组不能进行二进制数据的操作
 * 2.js数组不想java、python等语言效率高
 * 3.buffer内存空间开辟出固定大小的内存
 */

//  将字符串转成buffer对象
let str = 'helloworld'
let buf = Buffer.from(str)
// console.log(buf)


// 输出buffer内容
// console.log(buf.toString())

// 开辟一个空的buffer
let buf2 = Buffer.alloc(5)
buf2[0] = 10
console.log(buf2)

let buf3 = Buffer.allocUnsafe(5)

console.log(buf3)//  引入fs模块
let fs = require('fs')
// fs.writeFile('hello.txt', '晚饭吃啥2?', {encoding: 'utf-8',flag: 'r'}, (err)=>{
//   if(err) {
//     console.log(err)
//   }else {
//     console.log('success')
//   }
// })


function fsWrite(path, data) {
  return new Promise((resolve,reject)=>{
    fs.writeFile(path,data,{encoding: 'utf-8',flag: 'a'}, err=>{
      if(err) {
        reject(err)
      }else {
        resolve(err)
      }
    })
  })
}

async function writeList() {
  await fsWrite('gc.txt', '1今天中午吃什么?\n')
  await fsWrite('gc.txt', '2今天中午吃什么?\n')
  await fsWrite('gc.txt', '3今天中午吃什么?\n')
}

writeList()晚饭吃啥?晚饭吃啥2?let fs = require('fs')

let {fsRead,fsWrite} = require('./utils')
// 读取目录
const txtPath = 'all.txt'
fs.readdir('../03fs', (err,file)=>{
  if(err) {
    console.log(err)
  }else {
    file.forEach(async (e)=>{
      // console.log(e)
      let content = await fsRead('../03fs/'+e)
      await fsWrite(txtPath, content)
    })
  }
})

// var fs = require("fs");
// ​
// console.log("查看 /tmp 目录");
// fs.readdir("/tmp/",function(err, files){
//    if (err) {
//        return console.error(err);
//    }
//    files.forEach( function (file){
//        console.log( file );
//    });
// });let fs = require('fs')

// 删除目录
fs.rmdir('./abc', err=>{
  if(err) {
    console.log(err)
  }
})let fs = require('fs')

// 创建目录
fs.mkdir('./abc', err=>{
  if(err) {
    console.log(err)
  }else {
    console.log('success')
  }
})/**
 * 1.教你创建一个package.json文件,哦吼,起飞
 * 
 */
// 引入readline模块
let readline = require('readline')
let {fsWrite} = require('./utils')
//创建readline接口实例
let r1 = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

// question方法
// r1.question('今晚吃什么?',ans=>{
//   console.log('吃'+ans)
  // 不加close，则程序不会结束(哦吼,起飞)
  // r1.close()
// })

// close事件监听
r1.on('close', ()=>{
  // 结束程序
  process.exit(0)
})

function askQuestion(title) {
  return new Promise((resolve,reject)=>{
    r1.question(title,ans=>{
      resolve(ans)
    })
  })
}

async function createPackageJson() {
  let name = await askQuestion('你的包名叫什么?')
  let version = await askQuestion('你的版本是什么?')
  let description = await askQuestion('你的描述是什么?')
  let main = await askQuestion('你的主入口文件是什么?')
  let author = await askQuestion('作者是谁?')
  let content = `{
    "name": "${name}",
    "version": "${version}",
    "description": "${description}",
    "main": "${main}",
    "scripts": {
      "test": "echo \\"Error: no test specified\\" && exit 1"
    },
    "keywords": [],
    "author": "${author}",
    "license": "ISC",
    "dependencies": {
      "qs": "^6.9.4"
    }
  }`
  await fsWrite('./package.json', content)
  // 写完了,关闭进程
  r1.close()
}

createPackageJson()